package org.treemage
package repository

import model.db.CrawlStateDB
import model.domain.crawl.CrawlStatus

import io.getquill.*
import io.getquill.jdbczio.Quill
import zio.*

import java.sql.SQLException
import java.time.LocalDateTime

case class CrawlStateRepositoryLive(quill: Quill.Postgres[SnakeCase])
    extends CrawlStateRepository:
  import CrawlStatus.*
  import quill.*

  inline given InsertMeta[CrawlStateDB] =
    insertMeta[CrawlStateDB](_.id, _.createdAt, _.updatedAt)

  // id, createdAt, and updatedAt are generated by the database
  private val empty = CrawlStateDB(-1, CrawlStatus.Started, None, null, null)

  override val create: ZIO[Any, SQLException, Int] =
    for id <- run(
        Schema.crawlStates
          .insertValue(lift(empty))
          .returningGenerated(_.id)
      )
    yield id

  override def updateState(
      id: Int,
      state: CrawlStatus
  ): ZIO[Any, SQLException, Unit] =
    for _ <- run(
        Schema.crawlStates
          .filter(_.id == lift(id))
          .update(
            _.state -> lift(state),
            _.updatedAt -> lift(LocalDateTime.now())
          )
      )
    yield ()

  override def updateCrawledActivityCount(
      id: Int,
      count: Int
  ): ZIO[Any, SQLException, Unit] =
    for _ <- run(
        Schema.crawlStates
          .filter(_.id == lift(id))
          .update(
            _.totalActivitiesCrawled -> lift[Option[Int]](Some(count)),
            _.updatedAt -> lift(LocalDateTime.now())
          )
      )
    yield ()

  override def getById(
      id: Index
  ): ZIO[Any, SQLException, Option[CrawlStateDB]] =
    run(
      Schema.crawlStates
        .filter(_.id == lift(id))
    ).map(_.headOption)

object CrawlStateRepositoryLive:
  val layer: URLayer[Quill.Postgres[SnakeCase], CrawlStateRepository] =
    ZLayer.fromFunction(CrawlStateRepositoryLive(_))
